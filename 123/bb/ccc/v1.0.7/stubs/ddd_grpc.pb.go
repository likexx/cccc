// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ccc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DddClient is the client API for Ddd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DddClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Test2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Test3(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Test4(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type dddClient struct {
	cc grpc.ClientConnInterface
}

func NewDddClient(cc grpc.ClientConnInterface) DddClient {
	return &dddClient{cc}
}

func (c *dddClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/bb.ccc.ddd/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dddClient) Test2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/bb.ccc.ddd/Test2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dddClient) Test3(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/bb.ccc.ddd/Test3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dddClient) Test4(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/bb.ccc.ddd/Test4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DddServer is the server API for Ddd service.
// All implementations must embed UnimplementedDddServer
// for forward compatibility
type DddServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	Test2(context.Context, *HelloRequest) (*HelloReply, error)
	Test3(context.Context, *HelloRequest) (*HelloReply, error)
	Test4(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedDddServer()
}

// UnimplementedDddServer must be embedded to have forward compatible implementations.
type UnimplementedDddServer struct {
}

func (UnimplementedDddServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedDddServer) Test2(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test2 not implemented")
}
func (UnimplementedDddServer) Test3(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test3 not implemented")
}
func (UnimplementedDddServer) Test4(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test4 not implemented")
}
func (UnimplementedDddServer) mustEmbedUnimplementedDddServer() {}

// UnsafeDddServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DddServer will
// result in compilation errors.
type UnsafeDddServer interface {
	mustEmbedUnimplementedDddServer()
}

func RegisterDddServer(s grpc.ServiceRegistrar, srv DddServer) {
	s.RegisterService(&Ddd_ServiceDesc, srv)
}

func _Ddd_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DddServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bb.ccc.ddd/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DddServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ddd_Test2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DddServer).Test2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bb.ccc.ddd/Test2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DddServer).Test2(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ddd_Test3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DddServer).Test3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bb.ccc.ddd/Test3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DddServer).Test3(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ddd_Test4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DddServer).Test4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bb.ccc.ddd/Test4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DddServer).Test4(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ddd_ServiceDesc is the grpc.ServiceDesc for Ddd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ddd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bb.ccc.ddd",
	HandlerType: (*DddServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Ddd_SayHello_Handler,
		},
		{
			MethodName: "Test2",
			Handler:    _Ddd_Test2_Handler,
		},
		{
			MethodName: "Test3",
			Handler:    _Ddd_Test3_Handler,
		},
		{
			MethodName: "Test4",
			Handler:    _Ddd_Test4_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ddd.proto",
}
